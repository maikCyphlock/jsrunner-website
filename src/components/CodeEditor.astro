---
const { code, result } = Astro.props;
const SyntaxParser = (code: string) => {
  const bracketRegex = /(\[|\])/g;
  const parenthesisRegex = /(\(|\))/g;
  const curlyBracketRegex = /(\{|})/g;
  const stringRegex = /(["'`])(?:(?=(\\?))\2.)*?\1/g;
  const numberRegex = /\b\d+(\.\d+)?\b/g;
  const propertyRegex = /(?<=\.)\w+/g;
  const keywordRegex =
    /\b(function|var|fetch|let|const|if|throw|else|for|while|return|new|true|false|null|undefined)\b/g;
  return code
    .replace(stringRegex, '<span class="string">$&</span>')
    .replace(numberRegex, '<span class="number">$&</span>')
    .replace(propertyRegex, '<span class="property">$&</span>')
    .replace(keywordRegex, '<span class="keyword">$1</span>')
    .replace(bracketRegex, '<span class="bracket">$1</span>')
    .replace(parenthesisRegex, '<span class="parenthesis">$1</span>')
    .replace(curlyBracketRegex, '<span class="curly-bracket">$1</span>');
};

const sanitizeCode = SyntaxParser(code);
const sanitizeResult = SyntaxParser(result);
---

<script></script>

<div
  class="rounded flex text-slate-50 bg-slate-950 flex-col overflow-hidden"
>
  <div class="p-3 flex gap-2 border-b border-slate-800">
    <div class="rounded-full w-3 h-3 bg-[#ff5f56]"></div>
    <div class="rounded-full w-3 h-3 bg-[#ffbd2e]"></div>
    <div class="rounded-full w-3 h-3 bg-[#27c93f]"></div>
  </div>
  <div class="flex min-h-[300px]">
    <pre class="basis-1/2 p-4" set:html={sanitizeCode} />
    <pre
      class="basis-1/2 pt-4 border-l border-slate-800 p-4"
      set:html={sanitizeResult}
    />
  </div>
</div>

<style is:global>
  .bracket {
    color: #e5c07b;
  }

  .parenthesis {
    color: #e5c07b;
  }

  .keyword {
    color: #c594c5;
  }
  .curly-bracket {
    color: #c79061;
  }
  .string {
    color: #98c379 !important;
    & * {
      color: #98c379 !important;
    }
  }
  .number {
    color: #c79061;
  }
  .property {
    color: #e5c07b;
  }
</style>
